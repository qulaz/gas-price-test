// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/qulaz/gas-price-test/internal/entity"
)

// MockGasGraph is a mock of GasGraph interface.
type MockGasGraph struct {
	ctrl     *gomock.Controller
	recorder *MockGasGraphMockRecorder
}

// MockGasGraphMockRecorder is the mock recorder for MockGasGraph.
type MockGasGraphMockRecorder struct {
	mock *MockGasGraph
}

// NewMockGasGraph creates a new mock instance.
func NewMockGasGraph(ctrl *gomock.Controller) *MockGasGraph {
	mock := &MockGasGraph{ctrl: ctrl}
	mock.recorder = &MockGasGraphMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGasGraph) EXPECT() *MockGasGraphMockRecorder {
	return m.recorder
}

// Calculate mocks base method.
func (m *MockGasGraph) Calculate(arg0 context.Context) (entity.GasGraphResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calculate", arg0)
	ret0, _ := ret[0].(entity.GasGraphResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Calculate indicates an expected call of Calculate.
func (mr *MockGasGraphMockRecorder) Calculate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockGasGraph)(nil).Calculate), arg0)
}

// MockGasTransactionRepo is a mock of GasTransactionRepo interface.
type MockGasTransactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGasTransactionRepoMockRecorder
}

// MockGasTransactionRepoMockRecorder is the mock recorder for MockGasTransactionRepo.
type MockGasTransactionRepoMockRecorder struct {
	mock *MockGasTransactionRepo
}

// NewMockGasTransactionRepo creates a new mock instance.
func NewMockGasTransactionRepo(ctrl *gomock.Controller) *MockGasTransactionRepo {
	mock := &MockGasTransactionRepo{ctrl: ctrl}
	mock.recorder = &MockGasTransactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGasTransactionRepo) EXPECT() *MockGasTransactionRepoMockRecorder {
	return m.recorder
}

// GetGasTransactions mocks base method.
func (m *MockGasTransactionRepo) GetGasTransactions(arg0 context.Context) ([]*entity.GasTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasTransactions", arg0)
	ret0, _ := ret[0].([]*entity.GasTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasTransactions indicates an expected call of GetGasTransactions.
func (mr *MockGasTransactionRepoMockRecorder) GetGasTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasTransactions", reflect.TypeOf((*MockGasTransactionRepo)(nil).GetGasTransactions), arg0)
}
