// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package cachemock is a generated GoMock package.
package cachemock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockExpiredCache is a mock of ExpiredCache interface.
type MockExpiredCache[K comparable, V any] struct {
	ctrl     *gomock.Controller
	recorder *MockExpiredCacheMockRecorder[K, V]
}

// MockExpiredCacheMockRecorder is the mock recorder for MockExpiredCache.
type MockExpiredCacheMockRecorder[K comparable, V any] struct {
	mock *MockExpiredCache[K, V]
}

// NewMockExpiredCache creates a new mock instance.
func NewMockExpiredCache[K comparable, V any](ctrl *gomock.Controller) *MockExpiredCache[K, V] {
	mock := &MockExpiredCache[K, V]{ctrl: ctrl}
	mock.recorder = &MockExpiredCacheMockRecorder[K, V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpiredCache[K, V]) EXPECT() *MockExpiredCacheMockRecorder[K, V] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockExpiredCache[K, V]) Delete(key K) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExpiredCacheMockRecorder[K, V]) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpiredCache[K, V])(nil).Delete), key)
}

// Get mocks base method.
func (m *MockExpiredCache[K, V]) Get(key K) (V, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(V)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExpiredCacheMockRecorder[K, V]) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpiredCache[K, V])(nil).Get), key)
}

// Upsert mocks base method.
func (m *MockExpiredCache[K, V]) Upsert(key K, value V, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockExpiredCacheMockRecorder[K, V]) Upsert(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockExpiredCache[K, V])(nil).Upsert), key, value, ttl)
}
